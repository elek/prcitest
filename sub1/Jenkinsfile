node {

    docker.image('elek/ozone-build').inside {

        stage('Checkout') {
            checkout scm
        }

        stage('Clean') {
            status = sh returnStatus: true, script: 'mvn clean'
        }

        stageRunner('Author', "author", {})

        stage('Build') {
            prStatusStart("build")
            status = sh returnStatus: true, script: 'mvn clean install -DskipTests'
            prStatusResult(status, "build")
        }

        stageRunner('Licence', "rat", {
            archiveArtifacts 'target/rat-aggregated.txt'
        }, 'artifact/target/rat-aggregated.txt/*view*/')

        stageRunner('Unit test', "unit", {
            junit '**/target/surefire-reports/*.xml'
        }, 'testReport/')

        stageRunner('Findbugs', "findbugs", {
            archiveArtifacts 'target/findbugs-all.txt'

        }, 'artifact/target/findbugs-all.txt/*view*/')

        stageRunner('Checkstyle', "checkstyle", {
            checkstyle canComputeNew: false, canRunOnFailed: true, defaultEncoding: '', healthy: '', pattern: '**/checkstyle-result.xml', unHealthy: ''
        }, 'checkstyleResult')

    }

}

def stageRunner(name, type, processResult, url = '') {
    try {
        stage(name) {
            prStatusStart(type)
            status = sh returnStatus: true, script: 'sub1/dev-support/checks/' + type + '.sh'
            processResult()
            prStatusResult(status, type, url)
        }
        return true
    } catch (RuntimeException ex) {
        currentBuild.result = "FAILED"
        return false
    }
}

def prStatusStart(name) {
    if (env.CHANGE_ID) {
        pullRequest.createStatus(status: "pending",
                context: 'continuous-integration/jenkins/pr-merge/' + name,
                description: name + " is started")
    }
}

def prStatusResult(responseCode, name, url = '') {
    status = "error"
    desc = "failed"
    if (responseCode == 0) {
        status = "success"
        desc = "passed"
    }
    message = name + " is " + desc
    //System.out.println(responseCode)
    if (env.CHANGE_ID) {
        if (url) {
            pullRequest.createStatus(status: status,
                    context: 'continuous-integration/jenkins/pr-merge/' + name,
                    description: message,
                    targetUrl: env.BUILD_URL + url)
        } else {
            pullRequest.createStatus(status: status,
                    context: 'continuous-integration/jenkins/pr-merge/' + name,
                    description: message)
        }
    }
    if (responseCode != 0) {
        throw new RuntimeException(message)
    }
}
